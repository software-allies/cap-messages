{"version":3,"file":"messages.component.js","sourceRoot":"","sources":["../../../../src/components/messages/messages.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,YAAY,EAAE,iBAAiB,EAAE,MAAM,eAAe,CAAC;AACnF,OAAO,EAAa,WAAW,EAAe,UAAU,EAAE,MAAM,gBAAgB,CAAC;AACjF,OAAO,EAAE,eAAe,EAAE,MAAM,wBAAwB,CAAC;;IAqDrD,2BACY,cAA+B,EAChC,WAAwB;QADvB,mBAAc,GAAd,cAAc,CAAiB;QAChC,gBAAW,GAAX,WAAW,CAAa;yBAfb,EAAE;oBAIE,IAAI,YAAY,EAAE;uBAEhB;YACxB,QAAQ,EAAE,EAAE;YACZ,OAAO,EAAE,EAAE;SACd;KAOA;IAED,oCAAQ,GAAR;QAAA,iBAgBC;QAfG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YACvC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9D,OAAO,EAAE,CAAC,EAAE,EAAE,UAAU,CAAC,QAAQ,CAAC;SACrC,CAAC,CAAC;QAEH,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE;aAC5B,SAAS,CAAC,UAAA,MAAM;YACb,KAAI,CAAC,SAAS,GAAG,MAAM,CAAC;SAC3B,CAAC,CAAC;QAEP,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,iBAAiB,EAAE;aAC7C,SAAS,CAAC,UAAA,OAAO;YACd,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;YAChC,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAChC,CAAC,CAAC;KACV;IAED,uCAAW,GAAX;QACI,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC;KAC1B;IAED,oCAAQ,GAAR;QACI,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC;aACxC,SAAS,CAAC,UAAA,MAAM;YACb,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC;SAC1C,CAAC,CAAC;QACP,IAAI,CAAC,OAAO,CAAC,OAAO,GAAG,EAAE,CAAC;;KAE7B;;gBAlFJ,SAAS,SAAC;oBACP,QAAQ,EAAE,SAAS;oBACnB,QAAQ,EAAE,glCA2BL;oBACL,MAAM,EAAE,CAAC,EAAE,CAAC;oBACd,aAAa,EAAE,iBAAiB,CAAC,QAAQ;iBAC1C;;;;gBArCQ,eAAe;gBADJ,WAAW;;;yBA4C1B,MAAM;;4BA7CX;;SAwCa,iBAAiB","sourcesContent":["import { Component, Output, EventEmitter, ViewEncapsulation } from '@angular/core'; \nimport { FormGroup, FormBuilder, FormControl, Validators } from \"@angular/forms\";\nimport { MessagesService } from '../../messages.service';\nimport { MessageInterface } from '../../message.interface';\nimport { Subscription } from 'rxjs';\n\n\n@Component({\n    selector: \"msg-app\",\n    template: `\n\n        <ion-list>\n            <ion-item *ngFor=\"let _message of _messages\">\n                <strong>{{_message.nickname}}</strong>: {{_message.message}}\n            </ion-item>\n        </ion-list>\n\n        <ion-list>\n            <form [formGroup]=\"messagesform\" (ngSubmit)=\"onSubmit()\">\n\n            <ion-item>\n                <ion-label stacked primary>Nickname</ion-label>\n                <ion-input [(ngModel)]=\"message.nickname\" formControlName=\"nickname\"\n                        type=\"text\" id=\"nickname\" spellcheck=\"false\" autocapitalize=\"off\" ngDefaultControl>\n                </ion-input>\n            </ion-item>\n            <ion-item>\n                <ion-label stacked primary>Message</ion-label>\n                <ion-input [(ngModel)]=\"message.message\" formControlName=\"message\" type=\"text\" id=\"message\" ngDefaultControl>\n                </ion-input>\n            </ion-item>\n\n            <button ion-button type=\"submit\" block primary [disabled]=\"!messagesform.valid\">Send</button>\n\n            </form>\n        </ion-list>\n        `,\n    styles: [``],\n  encapsulation: ViewEncapsulation.Emulated\n})\nexport class MessagesComponent {\n    \n    _messages: string[] = [];\n    sub: Subscription;\n\n    @Output()\n    send: EventEmitter<any> = new EventEmitter();\n\n    message: MessageInterface = { \n        nickname: '', \n        message: '' \n    };\n\n    messagesform: FormGroup;\n\n    constructor(\n        private messageService: MessagesService,\n        public formBuilder: FormBuilder) {\n    }\n\n    ngOnInit(): any {\n        this.messagesform = this.formBuilder.group({\n            nickname: ['', [Validators.required, Validators.minLength(3)]],\n            message: ['', Validators.required]\n        });\n\n        this.messageService.getMessages()\n            .subscribe(result => {\n                this._messages = result;\n            });\n\n        this.sub = this.messageService.subscribeMessages()\n            .subscribe(message => {\n                console.log('message', message);\n                this._messages.push(message);\n            });\n    }\n\n    ngOnDestroy() {\n        this.sub.unsubscribe();\n    }\n\n    onSubmit() {\n        this.messageService.sendMessage(this.message)\n            .subscribe(result => {\n                console.log('onSubmit result', result);\n            });\n        this.message.message = '';\n        // this.send.emit(this.message);\n    }\n\n\n}\n\n"]}